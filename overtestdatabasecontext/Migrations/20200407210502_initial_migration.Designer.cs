// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sirkadirov.Overtest.Libraries.Shared.Database;

namespace Sirkadirov.Overtest.Libraries.Shared.Database.Migrations
{
    [DbContext(typeof(OvertestDatabaseContext))]
    [Migration("20200407210502_initial_migration")]
    partial class initial_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CuratorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true);

                    b.Property<bool>("EnableWaitingPage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Ends")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PinCodeClearText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .HasDefaultValue(null);

                    b.Property<bool>("PinCodeEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Starts")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true);

                    b.Property<int>("UserExitAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("UserExitEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("VisibleTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.Property<DateTime>("WaitingPageActivationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("Id");

                    b.HasIndex("CuratorId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Extras.CompetitionProgrammingTask", b =>
                {
                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProgrammingTaskId")
                        .HasColumnType("char(36)");

                    b.Property<int>("JudgementType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("CompetitionId", "ProgrammingTaskId");

                    b.HasIndex("ProgrammingTaskId");

                    b.ToTable("CompetitionProgrammingTasks");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Extras.CompetitionUser", b =>
                {
                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("CompetitionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CompetitionUsers");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<Guid?>("CuratorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true);

                    b.Property<string>("InstitutionName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true)
                        .HasDefaultValue(null);

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastSeen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Registered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserGroupId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8")
                        .HasMaxLength(256);

                    b.Property<Guid?>("UserPhotoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CuratorId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserPhotoId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CuratorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(255) CHARACTER SET utf8");

                    b.HasKey("Id");

                    b.HasIndex("CuratorId", "DisplayName")
                        .IsUnique();

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.UserPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Source")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("UserPhotos");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true);

                    b.Property<byte>("Difficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)100);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastTestingDataModification")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("TestingDataId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProgrammingTasks");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTaskCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true)
                        .HasDefaultValue(null);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("ProgrammingTaskCategories");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.TestingData.Extras.ProgrammingLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true)
                        .HasDefaultValue(null);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .IsUnicode(true);

                    b.Property<string>("SyntaxHighlightingOptions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext CHARACTER SET utf8")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("ProgrammingLanguages");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.TestingData.ProgrammingTaskTestingData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("DataPackageFile")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("DataPackageHash")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8");

                    b.Property<Guid>("ProgrammingTaskId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingTaskId")
                        .IsUnique();

                    b.ToTable("ProgrammingTaskTestingDatas");
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TestingApplications.TestingApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompetitionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ProcessingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time(6)")
                        .HasDefaultValue(new TimeSpan(0, 0, 0, 0, 0));

                    b.Property<Guid>("ProgrammingTaskId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TestingType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("ProgrammingTaskId");

                    b.ToTable("TestingApplications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Competition", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Extras.CompetitionProgrammingTask", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Competition", "Competition")
                        .WithMany("CompetitionProgrammingTasks")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTask", "ProgrammingTask")
                        .WithMany()
                        .HasForeignKey("ProgrammingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Extras.CompetitionUser", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Competition", "Competition")
                        .WithMany("CompetitionUsers")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.UserPhoto", "UserPhoto")
                        .WithOne("User")
                        .HasForeignKey("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", "UserPhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.UserGroup", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", "Curator")
                        .WithMany()
                        .HasForeignKey("CuratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTask", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTaskCategory", "Category")
                        .WithMany("ProgrammingTasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.TestingData.ProgrammingTaskTestingData", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTask", "ProgrammingTask")
                        .WithOne("TestingData")
                        .HasForeignKey("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.TestingData.ProgrammingTaskTestingData", "ProgrammingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TestingApplications.TestingApplication", b =>
                {
                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Competitions.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.ProgrammingTask", "ProgrammingTask")
                        .WithMany()
                        .HasForeignKey("ProgrammingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TestingApplications.Extras.TestingApplicationSourceCode", "SourceCode", b1 =>
                        {
                            b1.Property<Guid>("TestingApplicationId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("ProgrammingLanguageId")
                                .HasColumnType("char(36)");

                            b1.Property<byte[]>("SourceCode")
                                .IsRequired()
                                .HasColumnType("longblob")
                                .IsUnicode(true);

                            b1.HasKey("TestingApplicationId");

                            b1.HasIndex("ProgrammingLanguageId");

                            b1.ToTable("TestingApplications");

                            b1.HasOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TasksArchive.TestingData.Extras.ProgrammingLanguage", "ProgrammingLanguage")
                                .WithMany()
                                .HasForeignKey("ProgrammingLanguageId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TestingApplicationId");
                        });

                    b.OwnsOne("Sirkadirov.Overtest.Libraries.Shared.Database.Storage.TestingApplications.TestingApplication+ApplicationTestingResults", "TestingResults", b1 =>
                        {
                            b1.Property<Guid>("TestingApplicationId")
                                .HasColumnType("char(36)");

                            b1.Property<byte>("CompletionPercentage")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("tinyint unsigned")
                                .HasDefaultValue((byte)0);

                            b1.Property<string>("RawTestingResults")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("longtext CHARACTER SET utf8")
                                .HasDefaultValue(null);

                            b1.Property<int>("SolutionAdjudgement")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(0);

                            b1.HasKey("TestingApplicationId");

                            b1.ToTable("TestingApplications");

                            b1.WithOwner()
                                .HasForeignKey("TestingApplicationId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
