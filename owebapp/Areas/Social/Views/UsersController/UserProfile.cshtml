@using Sirkadirov.Overtest.WebApplication.ViewComponents.Shared
@model Sirkadirov.Overtest.Libraries.Shared.Database.Storage.Identity.User
@{
    ViewBag.PageTitle = string.Format(Localizer["Профіль користувача {0}"].Value, Model.FullName);
}

<div id="profileHeader" class="d-flex mt-5 mb-5">
    
    <div class="align-self-center">
        <div class="media no-selection-allowed">

            <style>
                .profile-photo {
                    width: 100px;
                    height: 100px;
                    border-radius: 50%;
                    background-color: var(--dark) !important;
                    color: var(--white) !important;
                }
                .profile-photo.has-photo {
                    background-image: url('https://via.placeholder.com/100');
                    background-size: cover;
                }
                .profile-photo.has-photo .photo-placeholder {
                    display: none;
                }
                .profile-photo:hover.has-photo .photo-placeholder{
                    display: inline;
                }
                .profile-photo.user-online {
                    border-style: solid;
                    border-width: 5px;
                    border-color: var(--success);
                }
            </style>

            <div class="profile-photo user-online shadow-lg mr-4 d-flex justify-content-center align-self-center" title="@string.Format(Localizer["Остання дія виконана користувачем {0}"].Value, Model.LastSeen)">
                @if (Model.UserPhotoId == null)
                {
                    <span class="photo-placeholder h1 font-weight-bold mt-auto mb-auto">@Model.FullName[0].ToString().ToUpper()</span>
                }
            </div>

            <div class="media-body align-self-center text-wrap">
                <h3 class="m-0 text-break" title="@Model.FullName">@Model.FullName</h3>
                <h5 class="mt-1 mb-1 text-break font-weight-light">@Model.InstitutionName</h5>
                <span class="m-0">
                    @switch (Model.Type)
                    {
                        case UserType.SuperUser:
                            <span class="text-danger"><i class="fas fa-user-secret"></i> @Localizer["Суперадміністратор"]</span>
                            break;
                        case UserType.Administrator:
                            <span class="text-muted"><i class="fas fa-user-shield"></i> @Localizer["Адміністратор"]</span>
                            break;
                        case UserType.Instructor:
                            <span class="text-muted"><i class="fas fa-user-tie"></i> @Localizer["Інструктор"]</span>
                            break;
                        case UserType.Student:
                            <span class="text-muted"><i class="fas fa-user-graduate"></i> @Localizer["Студент"]</span>
                            break;
                        case UserType.Anonymous:
                            <span class="text-muted"><i class="fas fa-ghost"></i> Ich weiß es nicht</span>
                            break;
                    }
                </span>
            </div>

        </div>
    </div>
    
    <div class="align-self-center ml-auto">
        
        @{
            Func<dynamic, object> DrawDropleftMenu() => 
                @<span>
                    
                    <partial name="ViewComponents/DropleftMenu/CommonSupportDropleftMenuItems" />
                    
                    <div class="dropdown-divider"></div>
                    
                    <a class="dropdown-item" href="#">
                        <i class="fas fa-user-edit"></i> @Localizer["Редагувати профіль"]
                    </a>
                    
                </span>;
        }
        
        @(await Component.InvokeAsync<DropleftMenuViewComponent>(DrawDropleftMenu()))
        
    </div>
    
</div>